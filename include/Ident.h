#pragma once
#include <iostream>
#include <vector>
#include <mutex>

#define SEPARATOR_CHAR '.'

/**
 * Размерность набора идентификаторов - количество идентификаторов от A1 до Z9
 * Счетчик идентификатора - каждый элемент вектора это разряд набора идентификаторов
 * Чем выше индекс в векторе, тем выше разряд идентификатора. Например: вектор из одного элемента
 * вектор(1) = А2, вектор(170) = Z9, вектор(1)(0) = A1.A2, вектор(170)(170)(0) = A1.Z9.Z9 и так далее
 * Нумерация идентификаторов в десятичной системе начинается с нуля, А1 = 0 , Z9 = 170, далее следующий разряд
 * Первый символ буквенный, состоит из заглавных букв латинского алфавита (прописан паттерном letters)
 * Второй символ цифровой, состоит из цифр десятичной системы счисления (прописан паттерном numbers)
 * Общее число идентификаторов в одном наборе составляет в оригинальном виде 171 идентификатор
 * Данное значение не закреплено в классе, но определятся при инициализации самостоятельно.
 * Таким образом, изменяя строки символов и цифр, вы меняете размерность системы счисления.
 * Количество разрядов не ограничено. Вектор растет по мере увеличения счетчика.
 * Символ разделитель разрядов идентификатора задан макросом SEPARATOR_CHAR
  */
class Ident {
private:
    std::string numbers {"123456789"};
    std::string letters {"ABCEHIKLNOPRSTUWXYZ"};
    const int boundSize = (int)(letters.length() * numbers.length()); // размерность набора идентификатора
    std::vector<int> counter; // десятичный счетчик идентификатора
    std::mutex counter_mutex;

public:
    Ident(); // конструктор по умолчанию, счетчик пустой
    explicit Ident(const std::string & identifier); // конструктор задающий стартовое значение идентификатора
    virtual ~Ident();

    bool setCounter(const std::string & identifier); // устанавливает счетчик в соответствие со значением идентификатора
    [[nodiscard]] int getBoundSize() const; // возвращает размерность набора идентификаторов (количество идентификаторов от A1 до Z9)
    std::string getBoundValue(int index); // возвращает строковый идентификатор по индексу (от 0 до < boundSize), или пустую строку если индекс за рамками
    int getBoundIndex(const std::string& value); // возвращает десятичное значение идентификатора в пределах boundSize, или -1 если идентификатор не распознан
    std::string getCurrentValue(); // возвращает строку идентификаторов соответствующую счетчику
    std::string counterInc(); // увеличивает счетчик на единицу

    void displayBound();

};
